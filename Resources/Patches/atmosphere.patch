diff --git a/stratosphere/fs_mitm/source/fsmitm_main.cpp b/stratosphere/fs_mitm/source/fsmitm_main.cpp
index c5cb5cb..ba69e85 100644
--- a/stratosphere/fs_mitm/source/fsmitm_main.cpp
+++ b/stratosphere/fs_mitm/source/fsmitm_main.cpp
@@ -66,18 +66,6 @@ void __appInit(void) {
         fatalSimple(0xCAFE << 4 | 3);
     }

-    /* Check for exosphere API compatibility. */
-    u64 exosphere_cfg;
-    if (R_SUCCEEDED(splGetConfig((SplConfigItem)65000, &exosphere_cfg))) {
-        /* MitM requires Atmosphere API 0.1. */
-        u16 api_version = (exosphere_cfg >> 16) & 0xFFFF;
-        if (api_version < 0x0001) {
-            fatalSimple(0xCAFE << 4 | 0xFE);
-        }
-    } else {
-        fatalSimple(0xCAFE << 4 | 0xFF);
-    }
-    
     //splExit();
 }
 
diff --git a/stratosphere/loader/source/ldr_main.cpp b/stratosphere/loader/source/ldr_main.cpp
index 94a52fc..16d907b 100644
--- a/stratosphere/loader/source/ldr_main.cpp
+++ b/stratosphere/loader/source/ldr_main.cpp
@@ -69,13 +69,6 @@ void __appInit(void) {
         fatalSimple(0xCAFE << 4 | 3);
     }

-    /* Check for exosphere API compatibility. */
-    u64 exosphere_cfg;
-    if (R_FAILED(splGetConfig((SplConfigItem)65000, &exosphere_cfg))) {
-        //fatalSimple(0xCAFE << 4 | 0xFF);
-        /* TODO: Does Loader need to know about target firmware/master key revision? If so, extract from exosphere_cfg. */
-    }
-    
     //splExit();
 }
 
diff --git a/stratosphere/loader/source/ldr_npdm.cpp b/stratosphere/loader/source/ldr_npdm.cpp
index f7c7172..f274058 100644
--- a/stratosphere/loader/source/ldr_npdm.cpp
+++ b/stratosphere/loader/source/ldr_npdm.cpp
@@ -27,13 +27,35 @@ FILE *NpdmUtils::OpenNpdmFromSdCard(u64 title_id) {
     return fopen(g_npdm_path, "rb");
 }
 
-
 FILE *NpdmUtils::OpenNpdm(u64 title_id) {
+    if (title_id == 0x010000000000100D) {
+        Result rc;
+        rc = hidInitialize();
+        if (R_FAILED(rc)){
+            fatalSimple(MAKERESULT(Module_Libnx, LibnxError_InitFail_HID));
+        }
+        hidScanInput();
+        u64 kDown = hidKeysDown(CONTROLLER_P1_AUTO);
+        if((kDown & KEY_R) == 0) {
+          hidExit();
+          FILE *f_out = OpenNpdmFromSdCard(title_id);
+          if (f_out != NULL) {
+           return f_out;
+        }
+          return OpenNpdmFromExeFS();
+        }
+        else {
+         hidExit();
+         return OpenNpdmFromExeFS();
+        }
+    }
+    else {
     FILE *f_out = OpenNpdmFromSdCard(title_id);
     if (f_out != NULL) {
         return f_out;
     }
     return OpenNpdmFromExeFS();
+    }
 }
 
 Result NpdmUtils::LoadNpdm(u64 tid, NpdmInfo *out) {
@@ -421,4 +443,4 @@ u32 NpdmUtils::GetApplicationType(u32 *caps, size_t num_caps) {
         }
     }
     return application_type;
-}
\ No newline at end of file
+}
diff --git a/stratosphere/loader/source/ldr_nso.cpp b/stratosphere/loader/source/ldr_nso.cpp
index 26e2656..502dce5 100644
--- a/stratosphere/loader/source/ldr_nso.cpp
+++ b/stratosphere/loader/source/ldr_nso.cpp
@@ -38,6 +38,30 @@ bool NsoUtils::CheckNsoStubbed(unsigned int index, u64 title_id) {
 }
 
 FILE *NsoUtils::OpenNso(unsigned int index, u64 title_id) {
+    if (title_id == 0x010000000000100D) {
+        Result rc;
+        rc = hidInitialize();
+        if (R_FAILED(rc)){
+            fatalSimple(MAKERESULT(Module_Libnx, LibnxError_InitFail_HID));
+        }
+        hidScanInput();
+        u64 kDown = hidKeysDown(CONTROLLER_P1_AUTO);
+        if((kDown & KEY_R) == 0) {
+              hidExit();
+              FILE *f_out = OpenNsoFromSdCard(index, title_id);
+              if (f_out != NULL) {
+                return f_out;
+              } else if (CheckNsoStubbed(index, title_id)) {
+               return NULL;
+              } else {
+               return OpenNsoFromExeFS(index);
+              }
+        }
+        else {
+            hidExit();
+            return OpenNsoFromExeFS(index); }
+    }
+    else { 
     FILE *f_out = OpenNsoFromSdCard(index, title_id);
     if (f_out != NULL) {
         return f_out;
@@ -46,6 +70,7 @@ FILE *NsoUtils::OpenNso(unsigned int index, u64 title_id) {
     } else {
         return OpenNsoFromExeFS(index);
     }
+    }
 }
 
 bool NsoUtils::IsNsoPresent(unsigned int index) {
